// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BountyClosed extends ethereum.Event {
  get params(): BountyClosed__Params {
    return new BountyClosed__Params(this);
  }
}

export class BountyClosed__Params {
  _event: BountyClosed;

  constructor(event: BountyClosed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get remainingReward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BountyCreated extends ethereum.Event {
  get params(): BountyCreated__Params {
    return new BountyCreated__Params(this);
  }
}

export class BountyCreated__Params {
  _event: BountyCreated;

  constructor(event: BountyCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get gauge(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rewardToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get numberOfPeriods(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get maxRewardPerVote(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get rewardPerPeriod(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get totalRewardAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get isUpgradeable(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }
}

export class BountyDurationIncrease extends ethereum.Event {
  get params(): BountyDurationIncrease__Params {
    return new BountyDurationIncrease__Params(this);
  }
}

export class BountyDurationIncrease__Params {
  _event: BountyDurationIncrease;

  constructor(event: BountyDurationIncrease) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get numberOfPeriods(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get totalRewardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maxRewardPerVote(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BountyDurationIncreaseQueued extends ethereum.Event {
  get params(): BountyDurationIncreaseQueued__Params {
    return new BountyDurationIncreaseQueued__Params(this);
  }
}

export class BountyDurationIncreaseQueued__Params {
  _event: BountyDurationIncreaseQueued;

  constructor(event: BountyDurationIncreaseQueued) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get numberOfPeriods(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get totalRewardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maxRewardPerVote(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bountyId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get protocolFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get period(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FeeCollectorUpdated extends ethereum.Event {
  get params(): FeeCollectorUpdated__Params {
    return new FeeCollectorUpdated__Params(this);
  }
}

export class FeeCollectorUpdated__Params {
  _event: FeeCollectorUpdated;

  constructor(event: FeeCollectorUpdated) {
    this._event = event;
  }

  get feeCollector(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeeUpdated extends ethereum.Event {
  get params(): FeeUpdated__Params {
    return new FeeUpdated__Params(this);
  }
}

export class FeeUpdated__Params {
  _event: FeeUpdated;

  constructor(event: FeeUpdated) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeesCollected extends ethereum.Event {
  get params(): FeesCollected__Params {
    return new FeesCollected__Params(this);
  }
}

export class FeesCollected__Params {
  _event: FeesCollected;

  constructor(event: FeesCollected) {
    this._event = event;
  }

  get rewardToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ManagerUpdated extends ethereum.Event {
  get params(): ManagerUpdated__Params {
    return new ManagerUpdated__Params(this);
  }
}

export class ManagerUpdated__Params {
  _event: ManagerUpdated;

  constructor(event: ManagerUpdated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PeriodRolledOver extends ethereum.Event {
  get params(): PeriodRolledOver__Params {
    return new PeriodRolledOver__Params(this);
  }
}

export class PeriodRolledOver__Params {
  _event: PeriodRolledOver;

  constructor(event: PeriodRolledOver) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get periodId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardPerPeriod(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RecipientSet extends ethereum.Event {
  get params(): RecipientSet__Params {
    return new RecipientSet__Params(this);
  }
}

export class RecipientSet__Params {
  _event: RecipientSet;

  constructor(event: RecipientSet) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Platform__activePeriodResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getId(): i32 {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }

  getRewardPerPeriod(): BigInt {
    return this.value2;
  }
}

export class Platform__bountiesResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: i32;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: i32,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getGauge(): Address {
    return this.value0;
  }

  getManager(): Address {
    return this.value1;
  }

  getRewardToken(): Address {
    return this.value2;
  }

  getNumberOfPeriods(): i32 {
    return this.value3;
  }

  getEndTimestamp(): BigInt {
    return this.value4;
  }

  getMaxRewardPerVote(): BigInt {
    return this.value5;
  }

  getTotalRewardAmount(): BigInt {
    return this.value6;
  }
}

export class Platform__getActivePeriodResultValue0Struct extends ethereum.Tuple {
  get id(): i32 {
    return this[0].toI32();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get rewardPerPeriod(): BigInt {
    return this[2].toBigInt();
  }
}

export class Platform__getBountyResultValue0Struct extends ethereum.Tuple {
  get gauge(): Address {
    return this[0].toAddress();
  }

  get manager(): Address {
    return this[1].toAddress();
  }

  get rewardToken(): Address {
    return this[2].toAddress();
  }

  get numberOfPeriods(): i32 {
    return this[3].toI32();
  }

  get endTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get maxRewardPerVote(): BigInt {
    return this[5].toBigInt();
  }

  get totalRewardAmount(): BigInt {
    return this[6].toBigInt();
  }

  get blacklist(): Array<Address> {
    return this[7].toAddressArray();
  }
}

export class Platform__getUpgradedBountyQueuedResultValue0Struct extends ethereum.Tuple {
  get numberOfPeriods(): i32 {
    return this[0].toI32();
  }

  get totalRewardAmount(): BigInt {
    return this[1].toBigInt();
  }

  get maxRewardPerVote(): BigInt {
    return this[2].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class Platform__upgradeBountyQueueResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getNumberOfPeriods(): i32 {
    return this.value0;
  }

  getTotalRewardAmount(): BigInt {
    return this.value1;
  }

  getMaxRewardPerVote(): BigInt {
    return this.value2;
  }

  getEndTimestamp(): BigInt {
    return this.value3;
  }
}

export class Platform extends ethereum.SmartContract {
  static bind(address: Address): Platform {
    return new Platform("Platform", address);
  }

  MINIMUM_PERIOD(): i32 {
    let result = super.call("MINIMUM_PERIOD", "MINIMUM_PERIOD():(uint8)", []);

    return result[0].toI32();
  }

  try_MINIMUM_PERIOD(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MINIMUM_PERIOD",
      "MINIMUM_PERIOD():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  activePeriod(param0: BigInt): Platform__activePeriodResult {
    let result = super.call(
      "activePeriod",
      "activePeriod(uint256):(uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Platform__activePeriodResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_activePeriod(
    param0: BigInt
  ): ethereum.CallResult<Platform__activePeriodResult> {
    let result = super.tryCall(
      "activePeriod",
      "activePeriod(uint256):(uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Platform__activePeriodResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  amountClaimed(param0: BigInt): BigInt {
    let result = super.call(
      "amountClaimed",
      "amountClaimed(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_amountClaimed(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountClaimed",
      "amountClaimed(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bounties(param0: BigInt): Platform__bountiesResult {
    let result = super.call(
      "bounties",
      "bounties(uint256):(address,address,address,uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Platform__bountiesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_bounties(param0: BigInt): ethereum.CallResult<Platform__bountiesResult> {
    let result = super.tryCall(
      "bounties",
      "bounties(uint256):(address,address,address,uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Platform__bountiesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  claim(bountyId: BigInt): BigInt {
    let result = super.call("claim", "claim(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bountyId)
    ]);

    return result[0].toBigInt();
  }

  try_claim(bountyId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bountyId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claim1(bountyId: BigInt, _recipient: Address): BigInt {
    let result = super.call("claim", "claim(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bountyId),
      ethereum.Value.fromAddress(_recipient)
    ]);

    return result[0].toBigInt();
  }

  try_claim1(
    bountyId: BigInt,
    _recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bountyId),
      ethereum.Value.fromAddress(_recipient)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimFor(user: Address, bountyId: BigInt): BigInt {
    let result = super.call("claimFor", "claimFor(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromUnsignedBigInt(bountyId)
    ]);

    return result[0].toBigInt();
  }

  try_claimFor(user: Address, bountyId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimFor",
      "claimFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(bountyId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimable(user: Address, bountyId: BigInt): BigInt {
    let result = super.call(
      "claimable",
      "claimable(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(bountyId)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimable(user: Address, bountyId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimable",
      "claimable(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(bountyId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createBounty(
    gauge: Address,
    manager: Address,
    rewardToken: Address,
    numberOfPeriods: i32,
    maxRewardPerVote: BigInt,
    totalRewardAmount: BigInt,
    blacklist: Array<Address>,
    upgradeable: boolean
  ): BigInt {
    let result = super.call(
      "createBounty",
      "createBounty(address,address,address,uint8,uint256,uint256,address[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(gauge),
        ethereum.Value.fromAddress(manager),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numberOfPeriods)),
        ethereum.Value.fromUnsignedBigInt(maxRewardPerVote),
        ethereum.Value.fromUnsignedBigInt(totalRewardAmount),
        ethereum.Value.fromAddressArray(blacklist),
        ethereum.Value.fromBoolean(upgradeable)
      ]
    );

    return result[0].toBigInt();
  }

  try_createBounty(
    gauge: Address,
    manager: Address,
    rewardToken: Address,
    numberOfPeriods: i32,
    maxRewardPerVote: BigInt,
    totalRewardAmount: BigInt,
    blacklist: Array<Address>,
    upgradeable: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createBounty",
      "createBounty(address,address,address,uint8,uint256,uint256,address[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(gauge),
        ethereum.Value.fromAddress(manager),
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(numberOfPeriods)),
        ethereum.Value.fromUnsignedBigInt(maxRewardPerVote),
        ethereum.Value.fromUnsignedBigInt(totalRewardAmount),
        ethereum.Value.fromAddressArray(blacklist),
        ethereum.Value.fromBoolean(upgradeable)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeAccrued(param0: Address): BigInt {
    let result = super.call("feeAccrued", "feeAccrued(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_feeAccrued(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeAccrued", "feeAccrued(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeCollector(): Address {
    let result = super.call("feeCollector", "feeCollector():(address)", []);

    return result[0].toAddress();
  }

  try_feeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeCollector", "feeCollector():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gaugeController(): Address {
    let result = super.call(
      "gaugeController",
      "gaugeController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_gaugeController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gaugeController",
      "gaugeController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActivePeriod(
    bountyId: BigInt
  ): Platform__getActivePeriodResultValue0Struct {
    let result = super.call(
      "getActivePeriod",
      "getActivePeriod(uint256):((uint8,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );

    return changetype<Platform__getActivePeriodResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getActivePeriod(
    bountyId: BigInt
  ): ethereum.CallResult<Platform__getActivePeriodResultValue0Struct> {
    let result = super.tryCall(
      "getActivePeriod",
      "getActivePeriod(uint256):((uint8,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Platform__getActivePeriodResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getActivePeriodPerBounty(bountyId: BigInt): i32 {
    let result = super.call(
      "getActivePeriodPerBounty",
      "getActivePeriodPerBounty(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );

    return result[0].toI32();
  }

  try_getActivePeriodPerBounty(bountyId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getActivePeriodPerBounty",
      "getActivePeriodPerBounty(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBlacklistedAddressesPerBounty(bountyId: BigInt): Array<Address> {
    let result = super.call(
      "getBlacklistedAddressesPerBounty",
      "getBlacklistedAddressesPerBounty(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );

    return result[0].toAddressArray();
  }

  try_getBlacklistedAddressesPerBounty(
    bountyId: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBlacklistedAddressesPerBounty",
      "getBlacklistedAddressesPerBounty(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBounty(bountyId: BigInt): Platform__getBountyResultValue0Struct {
    let result = super.call(
      "getBounty",
      "getBounty(uint256):((address,address,address,uint8,uint256,uint256,uint256,address[]))",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );

    return changetype<Platform__getBountyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBounty(
    bountyId: BigInt
  ): ethereum.CallResult<Platform__getBountyResultValue0Struct> {
    let result = super.tryCall(
      "getBounty",
      "getBounty(uint256):((address,address,address,uint8,uint256,uint256,uint256,address[]))",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Platform__getBountyResultValue0Struct>(value[0].toTuple())
    );
  }

  getCurrentPeriod(): BigInt {
    let result = super.call(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPeriodsLeft(bountyId: BigInt): BigInt {
    let result = super.call(
      "getPeriodsLeft",
      "getPeriodsLeft(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );

    return result[0].toBigInt();
  }

  try_getPeriodsLeft(bountyId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPeriodsLeft",
      "getPeriodsLeft(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUpgradedBountyQueued(
    bountyId: BigInt
  ): Platform__getUpgradedBountyQueuedResultValue0Struct {
    let result = super.call(
      "getUpgradedBountyQueued",
      "getUpgradedBountyQueued(uint256):((uint8,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );

    return changetype<Platform__getUpgradedBountyQueuedResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUpgradedBountyQueued(
    bountyId: BigInt
  ): ethereum.CallResult<Platform__getUpgradedBountyQueuedResultValue0Struct> {
    let result = super.tryCall(
      "getUpgradedBountyQueued",
      "getUpgradedBountyQueued(uint256):((uint8,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(bountyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Platform__getUpgradedBountyQueuedResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getVersion(): string {
    let result = super.call("getVersion", "getVersion():(string)", []);

    return result[0].toString();
  }

  try_getVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("getVersion", "getVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isBlacklisted(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "isBlacklisted",
      "isBlacklisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isBlacklisted(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBlacklisted",
      "isBlacklisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isKilled(): boolean {
    let result = super.call("isKilled", "isKilled():(bool)", []);

    return result[0].toBoolean();
  }

  try_isKilled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKilled", "isKilled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUpgradeable(param0: BigInt): boolean {
    let result = super.call("isUpgradeable", "isUpgradeable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isUpgradeable(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUpgradeable",
      "isUpgradeable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUserClaim(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "lastUserClaim",
      "lastUserClaim(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_lastUserClaim(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUserClaim",
      "lastUserClaim(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextID(): BigInt {
    let result = super.call("nextID", "nextID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextID", "nextID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recipient(param0: Address): Address {
    let result = super.call("recipient", "recipient(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_recipient(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("recipient", "recipient(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPerVote(param0: BigInt): BigInt {
    let result = super.call(
      "rewardPerVote",
      "rewardPerVote(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardPerVote(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerVote",
      "rewardPerVote(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  upgradeBountyQueue(param0: BigInt): Platform__upgradeBountyQueueResult {
    let result = super.call(
      "upgradeBountyQueue",
      "upgradeBountyQueue(uint256):(uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Platform__upgradeBountyQueueResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_upgradeBountyQueue(
    param0: BigInt
  ): ethereum.CallResult<Platform__upgradeBountyQueueResult> {
    let result = super.tryCall(
      "upgradeBountyQueue",
      "upgradeBountyQueue(uint256):(uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Platform__upgradeBountyQueueResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gaugeController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeCollector(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Claim1Call extends ethereum.Call {
  get inputs(): Claim1Call__Inputs {
    return new Claim1Call__Inputs(this);
  }

  get outputs(): Claim1Call__Outputs {
    return new Claim1Call__Outputs(this);
  }
}

export class Claim1Call__Inputs {
  _call: Claim1Call;

  constructor(call: Claim1Call) {
    this._call = call;
  }

  get bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Claim1Call__Outputs {
  _call: Claim1Call;

  constructor(call: Claim1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAllCall extends ethereum.Call {
  get inputs(): ClaimAllCall__Inputs {
    return new ClaimAllCall__Inputs(this);
  }

  get outputs(): ClaimAllCall__Outputs {
    return new ClaimAllCall__Outputs(this);
  }
}

export class ClaimAllCall__Inputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimAllCall__Outputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }
}

export class ClaimAll1Call extends ethereum.Call {
  get inputs(): ClaimAll1Call__Inputs {
    return new ClaimAll1Call__Inputs(this);
  }

  get outputs(): ClaimAll1Call__Outputs {
    return new ClaimAll1Call__Outputs(this);
  }
}

export class ClaimAll1Call__Inputs {
  _call: ClaimAll1Call;

  constructor(call: ClaimAll1Call) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimAll1Call__Outputs {
  _call: ClaimAll1Call;

  constructor(call: ClaimAll1Call) {
    this._call = call;
  }
}

export class ClaimAllForCall extends ethereum.Call {
  get inputs(): ClaimAllForCall__Inputs {
    return new ClaimAllForCall__Inputs(this);
  }

  get outputs(): ClaimAllForCall__Outputs {
    return new ClaimAllForCall__Outputs(this);
  }
}

export class ClaimAllForCall__Inputs {
  _call: ClaimAllForCall;

  constructor(call: ClaimAllForCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ClaimAllForCall__Outputs {
  _call: ClaimAllForCall;

  constructor(call: ClaimAllForCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get rewardTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimForCall extends ethereum.Call {
  get inputs(): ClaimForCall__Inputs {
    return new ClaimForCall__Inputs(this);
  }

  get outputs(): ClaimForCall__Outputs {
    return new ClaimForCall__Outputs(this);
  }
}

export class ClaimForCall__Inputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bountyId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimForCall__Outputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CloseBountyCall extends ethereum.Call {
  get inputs(): CloseBountyCall__Inputs {
    return new CloseBountyCall__Inputs(this);
  }

  get outputs(): CloseBountyCall__Outputs {
    return new CloseBountyCall__Outputs(this);
  }
}

export class CloseBountyCall__Inputs {
  _call: CloseBountyCall;

  constructor(call: CloseBountyCall) {
    this._call = call;
  }

  get bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseBountyCall__Outputs {
  _call: CloseBountyCall;

  constructor(call: CloseBountyCall) {
    this._call = call;
  }
}

export class CreateBountyCall extends ethereum.Call {
  get inputs(): CreateBountyCall__Inputs {
    return new CreateBountyCall__Inputs(this);
  }

  get outputs(): CreateBountyCall__Outputs {
    return new CreateBountyCall__Outputs(this);
  }
}

export class CreateBountyCall__Inputs {
  _call: CreateBountyCall;

  constructor(call: CreateBountyCall) {
    this._call = call;
  }

  get gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get manager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get numberOfPeriods(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get maxRewardPerVote(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get totalRewardAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get blacklist(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }

  get upgradeable(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class CreateBountyCall__Outputs {
  _call: CreateBountyCall;

  constructor(call: CreateBountyCall) {
    this._call = call;
  }

  get newBountyId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseBountyDurationCall extends ethereum.Call {
  get inputs(): IncreaseBountyDurationCall__Inputs {
    return new IncreaseBountyDurationCall__Inputs(this);
  }

  get outputs(): IncreaseBountyDurationCall__Outputs {
    return new IncreaseBountyDurationCall__Outputs(this);
  }
}

export class IncreaseBountyDurationCall__Inputs {
  _call: IncreaseBountyDurationCall;

  constructor(call: IncreaseBountyDurationCall) {
    this._call = call;
  }

  get _bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _additionnalPeriods(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _increasedAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _newMaxPricePerVote(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class IncreaseBountyDurationCall__Outputs {
  _call: IncreaseBountyDurationCall;

  constructor(call: IncreaseBountyDurationCall) {
    this._call = call;
  }
}

export class KillCall extends ethereum.Call {
  get inputs(): KillCall__Inputs {
    return new KillCall__Inputs(this);
  }

  get outputs(): KillCall__Outputs {
    return new KillCall__Outputs(this);
  }
}

export class KillCall__Inputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class KillCall__Outputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class SetFeeCollectorCall extends ethereum.Call {
  get inputs(): SetFeeCollectorCall__Inputs {
    return new SetFeeCollectorCall__Inputs(this);
  }

  get outputs(): SetFeeCollectorCall__Outputs {
    return new SetFeeCollectorCall__Outputs(this);
  }
}

export class SetFeeCollectorCall__Inputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }

  get _feeCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeCollectorCall__Outputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }
}

export class SetPlatformFeeCall extends ethereum.Call {
  get inputs(): SetPlatformFeeCall__Inputs {
    return new SetPlatformFeeCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeCall__Outputs {
    return new SetPlatformFeeCall__Outputs(this);
  }
}

export class SetPlatformFeeCall__Inputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeeCall__Outputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }
}

export class SetRecipientCall extends ethereum.Call {
  get inputs(): SetRecipientCall__Inputs {
    return new SetRecipientCall__Inputs(this);
  }

  get outputs(): SetRecipientCall__Outputs {
    return new SetRecipientCall__Outputs(this);
  }
}

export class SetRecipientCall__Inputs {
  _call: SetRecipientCall;

  constructor(call: SetRecipientCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRecipientCall__Outputs {
  _call: SetRecipientCall;

  constructor(call: SetRecipientCall) {
    this._call = call;
  }
}

export class SetRecipientForCall extends ethereum.Call {
  get inputs(): SetRecipientForCall__Inputs {
    return new SetRecipientForCall__Inputs(this);
  }

  get outputs(): SetRecipientForCall__Outputs {
    return new SetRecipientForCall__Outputs(this);
  }
}

export class SetRecipientForCall__Inputs {
  _call: SetRecipientForCall;

  constructor(call: SetRecipientForCall) {
    this._call = call;
  }

  get _for(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetRecipientForCall__Outputs {
  _call: SetRecipientForCall;

  constructor(call: SetRecipientForCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBountyPeriodCall extends ethereum.Call {
  get inputs(): UpdateBountyPeriodCall__Inputs {
    return new UpdateBountyPeriodCall__Inputs(this);
  }

  get outputs(): UpdateBountyPeriodCall__Outputs {
    return new UpdateBountyPeriodCall__Outputs(this);
  }
}

export class UpdateBountyPeriodCall__Inputs {
  _call: UpdateBountyPeriodCall;

  constructor(call: UpdateBountyPeriodCall) {
    this._call = call;
  }

  get bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateBountyPeriodCall__Outputs {
  _call: UpdateBountyPeriodCall;

  constructor(call: UpdateBountyPeriodCall) {
    this._call = call;
  }
}

export class UpdateBountyPeriodsCall extends ethereum.Call {
  get inputs(): UpdateBountyPeriodsCall__Inputs {
    return new UpdateBountyPeriodsCall__Inputs(this);
  }

  get outputs(): UpdateBountyPeriodsCall__Outputs {
    return new UpdateBountyPeriodsCall__Outputs(this);
  }
}

export class UpdateBountyPeriodsCall__Inputs {
  _call: UpdateBountyPeriodsCall;

  constructor(call: UpdateBountyPeriodsCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UpdateBountyPeriodsCall__Outputs {
  _call: UpdateBountyPeriodsCall;

  constructor(call: UpdateBountyPeriodsCall) {
    this._call = call;
  }
}

export class UpdateManagerCall extends ethereum.Call {
  get inputs(): UpdateManagerCall__Inputs {
    return new UpdateManagerCall__Inputs(this);
  }

  get outputs(): UpdateManagerCall__Outputs {
    return new UpdateManagerCall__Outputs(this);
  }
}

export class UpdateManagerCall__Inputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }

  get bountyId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateManagerCall__Outputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }
}
