// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get questID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get period(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class NewPendingOwner extends ethereum.Event {
  get params(): NewPendingOwner__Params {
    return new NewPendingOwner__Params(this);
  }
}

export class NewPendingOwner__Params {
  _event: NewPendingOwner;

  constructor(event: NewPendingOwner) {
    this._event = event;
  }

  get previousPendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewQuest extends ethereum.Event {
  get params(): NewQuest__Params {
    return new NewQuest__Params(this);
  }
}

export class NewQuest__Params {
  _event: NewQuest;

  constructor(event: NewQuest) {
    this._event = event;
  }

  get questID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class QuestPeriodUpdated extends ethereum.Event {
  get params(): QuestPeriodUpdated__Params {
    return new QuestPeriodUpdated__Params(this);
  }
}

export class QuestPeriodUpdated__Params {
  _event: QuestPeriodUpdated;

  constructor(event: QuestPeriodUpdated) {
    this._event = event;
  }

  get questID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get period(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get merkleRoot(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  addQuest(questID: BigInt, token: Address): boolean {
    let result = super.call("addQuest", "addQuest(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(questID),
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_addQuest(questID: BigInt, token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("addQuest", "addQuest(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(questID),
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addQuestPeriod(
    questID: BigInt,
    period: BigInt,
    totalRewardAmount: BigInt
  ): boolean {
    let result = super.call(
      "addQuestPeriod",
      "addQuestPeriod(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(totalRewardAmount)
      ]
    );

    return result[0].toBoolean();
  }

  try_addQuestPeriod(
    questID: BigInt,
    period: BigInt,
    totalRewardAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addQuestPeriod",
      "addQuestPeriod(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(totalRewardAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  emergencyUpdateQuestPeriod(
    questID: BigInt,
    period: BigInt,
    addedRewardAmount: BigInt,
    merkleRoot: Bytes
  ): boolean {
    let result = super.call(
      "emergencyUpdateQuestPeriod",
      "emergencyUpdateQuestPeriod(uint256,uint256,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(addedRewardAmount),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );

    return result[0].toBoolean();
  }

  try_emergencyUpdateQuestPeriod(
    questID: BigInt,
    period: BigInt,
    addedRewardAmount: BigInt,
    merkleRoot: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyUpdateQuestPeriod",
      "emergencyUpdateQuestPeriod(uint256,uint256,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(addedRewardAmount),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClosedPeriodsByQuests(questID: BigInt): Array<BigInt> {
    let result = super.call(
      "getClosedPeriodsByQuests",
      "getClosedPeriodsByQuests(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(questID)]
    );

    return result[0].toBigIntArray();
  }

  try_getClosedPeriodsByQuests(
    questID: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getClosedPeriodsByQuests",
      "getClosedPeriodsByQuests(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(questID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isClaimed(questID: BigInt, period: BigInt, index: BigInt): boolean {
    let result = super.call(
      "isClaimed",
      "isClaimed(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBoolean();
  }

  try_isClaimed(
    questID: BigInt,
    period: BigInt,
    index: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClaimed",
      "isClaimed(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  questBoard(): Address {
    let result = super.call("questBoard", "questBoard():(address)", []);

    return result[0].toAddress();
  }

  try_questBoard(): ethereum.CallResult<Address> {
    let result = super.tryCall("questBoard", "questBoard():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  questClosedPeriods(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "questClosedPeriods",
      "questClosedPeriods(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_questClosedPeriods(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "questClosedPeriods",
      "questClosedPeriods(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  questMerkleRootPerPeriod(param0: BigInt, param1: BigInt): Bytes {
    let result = super.call(
      "questMerkleRootPerPeriod",
      "questMerkleRootPerPeriod(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_questMerkleRootPerPeriod(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "questMerkleRootPerPeriod",
      "questMerkleRootPerPeriod(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  questRewardToken(param0: BigInt): Address {
    let result = super.call(
      "questRewardToken",
      "questRewardToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_questRewardToken(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "questRewardToken",
      "questRewardToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  questRewardsPerPeriod(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "questRewardsPerPeriod",
      "questRewardsPerPeriod(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_questRewardsPerPeriod(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "questRewardsPerPeriod",
      "questRewardsPerPeriod(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recoverERC20(token: Address): boolean {
    let result = super.call("recoverERC20", "recoverERC20(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_recoverERC20(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("recoverERC20", "recoverERC20(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardTokens(param0: Address): boolean {
    let result = super.call("rewardTokens", "rewardTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_rewardTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("rewardTokens", "rewardTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateQuestPeriod(
    questID: BigInt,
    period: BigInt,
    totalAmount: BigInt,
    merkleRoot: Bytes
  ): boolean {
    let result = super.call(
      "updateQuestPeriod",
      "updateQuestPeriod(uint256,uint256,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateQuestPeriod(
    questID: BigInt,
    period: BigInt,
    totalAmount: BigInt,
    merkleRoot: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateQuestPeriod",
      "updateQuestPeriod(uint256,uint256,uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(questID),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(totalAmount),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _questBoard(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddQuestCall extends ethereum.Call {
  get inputs(): AddQuestCall__Inputs {
    return new AddQuestCall__Inputs(this);
  }

  get outputs(): AddQuestCall__Outputs {
    return new AddQuestCall__Outputs(this);
  }
}

export class AddQuestCall__Inputs {
  _call: AddQuestCall;

  constructor(call: AddQuestCall) {
    this._call = call;
  }

  get questID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddQuestCall__Outputs {
  _call: AddQuestCall;

  constructor(call: AddQuestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddQuestPeriodCall extends ethereum.Call {
  get inputs(): AddQuestPeriodCall__Inputs {
    return new AddQuestPeriodCall__Inputs(this);
  }

  get outputs(): AddQuestPeriodCall__Outputs {
    return new AddQuestPeriodCall__Outputs(this);
  }
}

export class AddQuestPeriodCall__Inputs {
  _call: AddQuestPeriodCall;

  constructor(call: AddQuestPeriodCall) {
    this._call = call;
  }

  get questID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get period(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalRewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddQuestPeriodCall__Outputs {
  _call: AddQuestPeriodCall;

  constructor(call: AddQuestPeriodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get questID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get period(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimQuestCall extends ethereum.Call {
  get inputs(): ClaimQuestCall__Inputs {
    return new ClaimQuestCall__Inputs(this);
  }

  get outputs(): ClaimQuestCall__Outputs {
    return new ClaimQuestCall__Outputs(this);
  }
}

export class ClaimQuestCall__Inputs {
  _call: ClaimQuestCall;

  constructor(call: ClaimQuestCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get questID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claims(): Array<ClaimQuestCallClaimsStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      ClaimQuestCallClaimsStruct
    >();
  }
}

export class ClaimQuestCall__Outputs {
  _call: ClaimQuestCall;

  constructor(call: ClaimQuestCall) {
    this._call = call;
  }
}

export class ClaimQuestCallClaimsStruct extends ethereum.Tuple {
  get questID(): BigInt {
    return this[0].toBigInt();
  }

  get period(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this[4].toBytesArray();
  }
}

export class EmergencyUpdateQuestPeriodCall extends ethereum.Call {
  get inputs(): EmergencyUpdateQuestPeriodCall__Inputs {
    return new EmergencyUpdateQuestPeriodCall__Inputs(this);
  }

  get outputs(): EmergencyUpdateQuestPeriodCall__Outputs {
    return new EmergencyUpdateQuestPeriodCall__Outputs(this);
  }
}

export class EmergencyUpdateQuestPeriodCall__Inputs {
  _call: EmergencyUpdateQuestPeriodCall;

  constructor(call: EmergencyUpdateQuestPeriodCall) {
    this._call = call;
  }

  get questID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get period(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get addedRewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class EmergencyUpdateQuestPeriodCall__Outputs {
  _call: EmergencyUpdateQuestPeriodCall;

  constructor(call: EmergencyUpdateQuestPeriodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MultiClaimCall extends ethereum.Call {
  get inputs(): MultiClaimCall__Inputs {
    return new MultiClaimCall__Inputs(this);
  }

  get outputs(): MultiClaimCall__Outputs {
    return new MultiClaimCall__Outputs(this);
  }
}

export class MultiClaimCall__Inputs {
  _call: MultiClaimCall;

  constructor(call: MultiClaimCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get claims(): Array<MultiClaimCallClaimsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      MultiClaimCallClaimsStruct
    >();
  }
}

export class MultiClaimCall__Outputs {
  _call: MultiClaimCall;

  constructor(call: MultiClaimCall) {
    this._call = call;
  }
}

export class MultiClaimCallClaimsStruct extends ethereum.Tuple {
  get questID(): BigInt {
    return this[0].toBigInt();
  }

  get period(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this[4].toBytesArray();
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateQuestPeriodCall extends ethereum.Call {
  get inputs(): UpdateQuestPeriodCall__Inputs {
    return new UpdateQuestPeriodCall__Inputs(this);
  }

  get outputs(): UpdateQuestPeriodCall__Outputs {
    return new UpdateQuestPeriodCall__Outputs(this);
  }
}

export class UpdateQuestPeriodCall__Inputs {
  _call: UpdateQuestPeriodCall;

  constructor(call: UpdateQuestPeriodCall) {
    this._call = call;
  }

  get questID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get period(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class UpdateQuestPeriodCall__Outputs {
  _call: UpdateQuestPeriodCall;

  constructor(call: UpdateQuestPeriodCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
